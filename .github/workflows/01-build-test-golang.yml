name: Build and Test
on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build And Test
    env:
      SLACK_MESSAGE_JOB: 'Job executed successfully :white_check_mark:'
    steps:          
      - name: Slack Notification Start Job
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: devops-test
          SLACK_COLOR: good
          SLACK_TITLE: 'Start Job CI :gear:'
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_FOOTER: KumulyBot
      
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17

      - name: Install dependencies
        run: go get ./...

      - name: Run Lint
        uses: golangci/golangci-lint-action@v2

      - name: Test
        run: |
          go install github.com/jandelgado/gcov2lcov@latest && mkdir coverage
          go test -v ./... -coverprofile=coverage.out && \
          gcov2lcov -infile=coverage.out -outfile=coverage/coverage.lcov

      - name: Build
        run: go build -v ./...

      - name: Upload Test Coverage Files
        uses: actions/upload-artifact@v2
        with:
          name: coverage-files
          path: ./coverage
          retention-days: 1

      - name: Update Slack Message
        if: ${{ always() && job.status != 'success' }}
        run: echo "SLACK_MESSAGE_JOB=Job executed with errors :x:" >> $GITHUB_ENV
        
      - name: Slack Notification Status Job
        uses: rtCamp/action-slack-notify@v2
        if: always()
        env:
          SLACK_CHANNEL: devops-test
          SLACK_COLOR: ${{ job.status }}
          SLACK_TITLE: 'Status Job CI :gear:'
          SLACK_MESSAGE: ${{ env.SLACK_MESSAGE_JOB }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_FOOTER: KumulyBot


